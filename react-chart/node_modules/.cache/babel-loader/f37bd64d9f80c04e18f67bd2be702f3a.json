{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/callezenwaka/project/graphs/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/home/callezenwaka/project/graphs/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/callezenwaka/project/graphs/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\n// Simple caching for constant-radius points.\nvar cacheDigits, cacheAppend, cacheRadius, cacheCircle;\nvar PathString = /*#__PURE__*/function () {\n  function PathString(digits) {\n    _classCallCheck(this, PathString);\n    this._append = digits == null ? append : appendRound(digits);\n    this._radius = 4.5;\n    this._ = \"\";\n  }\n  _createClass(PathString, [{\n    key: \"pointRadius\",\n    value: function pointRadius(_) {\n      this._radius = +_;\n      return this;\n    }\n  }, {\n    key: \"polygonStart\",\n    value: function polygonStart() {\n      this._line = 0;\n    }\n  }, {\n    key: \"polygonEnd\",\n    value: function polygonEnd() {\n      this._line = NaN;\n    }\n  }, {\n    key: \"lineStart\",\n    value: function lineStart() {\n      this._point = 0;\n    }\n  }, {\n    key: \"lineEnd\",\n    value: function lineEnd() {\n      if (this._line === 0) this._ += \"Z\";\n      this._point = NaN;\n    }\n  }, {\n    key: \"point\",\n    value: function point(x, y) {\n      switch (this._point) {\n        case 0:\n          {\n            this._append(_templateObject || (_templateObject = _taggedTemplateLiteral([\"M\", \",\", \"\"])), x, y);\n            this._point = 1;\n            break;\n          }\n        case 1:\n          {\n            this._append(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"L\", \",\", \"\"])), x, y);\n            break;\n          }\n        default:\n          {\n            this._append(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"M\", \",\", \"\"])), x, y);\n            if (this._radius !== cacheRadius || this._append !== cacheAppend) {\n              var r = this._radius;\n              var s = this._;\n              this._ = \"\"; // stash the old string so we can cache the circle path fragment\n              this._append(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"m0,\", \"a\", \",\", \" 0 1,1 0,\", \"a\", \",\", \" 0 1,1 0,\", \"z\"])), r, r, r, -2 * r, r, r, 2 * r);\n              cacheRadius = r;\n              cacheAppend = this._append;\n              cacheCircle = this._;\n              this._ = s;\n            }\n            this._ += cacheCircle;\n            break;\n          }\n      }\n    }\n  }, {\n    key: \"result\",\n    value: function result() {\n      var result = this._;\n      this._ = \"\";\n      return result.length ? result : null;\n    }\n  }]);\n  return PathString;\n}();\nexport { PathString as default };\nfunction append(strings) {\n  var i = 1;\n  this._ += strings[0];\n  for (var j = strings.length; i < j; ++i) {\n    this._ += arguments[i] + strings[i];\n  }\n}\nfunction appendRound(digits) {\n  var d = Math.floor(digits);\n  if (!(d >= 0)) throw new RangeError(\"invalid digits: \".concat(digits));\n  if (d > 15) return append;\n  if (d !== cacheDigits) {\n    var k = Math.pow(10, d);\n    cacheDigits = d;\n    cacheAppend = function append(strings) {\n      var i = 1;\n      this._ += strings[0];\n      for (var j = strings.length; i < j; ++i) {\n        this._ += Math.round(arguments[i] * k) / k + strings[i];\n      }\n    };\n  }\n  return cacheAppend;\n}","map":null,"metadata":{},"sourceType":"module"}
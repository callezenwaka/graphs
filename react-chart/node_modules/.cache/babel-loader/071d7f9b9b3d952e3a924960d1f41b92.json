{"ast":null,"code":"import { slice } from \"./array.js\";\nimport constant from \"./constant.js\";\nimport { bumpX, bumpY, bumpRadial } from \"./curve/bump.js\";\nimport { withPath } from \"./path.js\";\nimport { x as pointX, y as pointY } from \"./point.js\";\nfunction linkSource(d) {\n  return d.source;\n}\nfunction linkTarget(d) {\n  return d.target;\n}\nexport function link(curve) {\n  var source = linkSource,\n    target = linkTarget,\n    x = pointX,\n    y = pointY,\n    context = null,\n    output = null,\n    path = withPath(link);\n  function link() {\n    var buffer;\n    var argv = slice.call(arguments);\n    var s = source.apply(this, argv);\n    var t = target.apply(this, argv);\n    if (context == null) output = curve(buffer = path());\n    output.lineStart();\n    argv[0] = s, output.point(+x.apply(this, argv), +y.apply(this, argv));\n    argv[0] = t, output.point(+x.apply(this, argv), +y.apply(this, argv));\n    output.lineEnd();\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n  link.source = function (_) {\n    return arguments.length ? (source = _, link) : source;\n  };\n  link.target = function (_) {\n    return arguments.length ? (target = _, link) : target;\n  };\n  link.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), link) : x;\n  };\n  link.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), link) : y;\n  };\n  link.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), link) : context;\n  };\n  return link;\n}\nexport function linkHorizontal() {\n  return link(bumpX);\n}\nexport function linkVertical() {\n  return link(bumpY);\n}\nexport function linkRadial() {\n  var l = link(bumpRadial);\n  l.angle = l.x, delete l.x;\n  l.radius = l.y, delete l.y;\n  return l;\n}","map":null,"metadata":{},"sourceType":"module"}